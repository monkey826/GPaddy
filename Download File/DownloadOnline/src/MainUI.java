
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.Timestamp;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Monkey
 */
public class MainUI extends javax.swing.JFrame {

    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfURL = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnDownloadNormal = new javax.swing.JButton();
        pbNormal = new javax.swing.JProgressBar();
        pbFast3 = new javax.swing.JProgressBar();
        pbFast2 = new javax.swing.JProgressBar();
        pbFast1 = new javax.swing.JProgressBar();
        btnDownloadFast = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        tfURL.setText("Copy link here...");

        jLabel1.setText("Enter URL file:");

        btnDownloadNormal.setText("Download Normal");
        btnDownloadNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadNormalActionPerformed(evt);
            }
        });

        pbNormal.setAutoscrolls(true);

        btnDownloadFast.setText("Download Fast");
        btnDownloadFast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadFastActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfURL)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(pbNormal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnDownloadNormal, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(pbFast1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(pbFast2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(pbFast3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(btnDownloadFast, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 28, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tfURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(btnDownloadNormal)
                .addGap(18, 18, 18)
                .addComponent(pbNormal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(btnDownloadFast)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pbFast3, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .addComponent(pbFast2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pbFast1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDownloadNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadNormalActionPerformed
        // TODO add your handling code here:
        long timeStart = System.currentTimeMillis();
        Thread thread = new Thread() { // New Thread to download normal
            @Override
            public void run() {
                String link = tfURL.getText().trim();
                System.out.println(link);
                String nameFile[] = link.split("/");
                String file = getDirectory() + "/" + "423.mp4";// nameFile[nameFile.length - 1];
                DownloadNormal downloadNormal = new DownloadNormal(getMain(), link, file);
                if (downloadNormal.status == true) {
                    long timeEnd = System.currentTimeMillis();
                    JOptionPane.showMessageDialog(rootPane, "It takes: "+(-timeStart+timeEnd)/1000 +"s", "Downloading", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        };
        thread.start();
        
//       
    }//GEN-LAST:event_btnDownloadNormalActionPerformed
    public void updateProgress(int ID, int rate) {
        // Update progress bar
        switch (ID) {
            case 1:
                pbFast1.setValue(rate);
                break;
            case 2:
                pbFast2.setValue(rate);
                break;
            case 3:
                pbFast3.setValue(rate);
                break;
            case 4:
                pbNormal.setValue(rate);
            default:
                break;
        }
    }

    public MainUI getMain() {
        return this;
    }
    private void btnDownloadFastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadFastActionPerformed
        long timeStart = System.currentTimeMillis();
        Thread thread = new Thread() { // New thread to download fast
            @Override
            public void run() {
                try {
                    // TODO add your handling code here:
                    

                    String link = tfURL.getText().trim();
                    System.out.println(link);
                    String nameFile[] = link.split("/");
                    String file = getDirectory() + "\\" + "43242.mp4";//nameFile[nameFile.length - 1];

                    URL url = new URL(link);
                    int size = url.openConnection().getContentLength();

                    System.out.println(size);

                    int index1 = (int) (size / 3);
                    int index2 = 2 * index1;
                    // 3 Threads download
                    ThreadDownload t1 = new ThreadDownload(getMain(), link, file, 1, 0, index1);
                    ThreadDownload t2 = new ThreadDownload(getMain(), link, file + "2", 2, index1, index2);
                    ThreadDownload t3 = new ThreadDownload(getMain(), link, file + "3", 3, index2, size);
                    t1.start();
                    t2.start();
                    t3.start();
                    int i = 0;
                    while (1 != 0) {
                        // Loop check download success??
                        if ((t1.status == true) && (t2.status == true) && (t3.status == true)) {
                            // If downloaded , merge file
//                            JOptionPane.showMessageDialog(null, "Done download!");
                            t1.mergeFile(file, file + "2", file + "3");
                            long timeEnd = System.currentTimeMillis();
                            JOptionPane.showMessageDialog(rootPane, "It takes: "+(-timeStart+timeEnd)/1000 +"s", "Downloading", JOptionPane.OK_OPTION);
                            JOptionPane.showMessageDialog(null, "Done merge files!");
                            
                            break;
                        } else if (i == 50000) {
                            System.out.println("Wait...");
                        }
                        i++;

                    }

                } catch (MalformedURLException ex) {
                    Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ioe) {
                    System.err.println(ioe.getMessage());
                }
            }
        };
        thread.start();

    }//GEN-LAST:event_btnDownloadFastActionPerformed
    private String getDirectory() {
        //Choose directory
        String directory = null;
        JFileChooser folderChooser = new JFileChooser();
        folderChooser.setCurrentDirectory(new File("E:\\"));
        folderChooser.setDialogTitle("Choose directory");
        folderChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        folderChooser.setAcceptAllFileFilterUsed(false);

        if (folderChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            directory = folderChooser.getSelectedFile().getAbsolutePath();
        }
        return directory;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDownloadFast;
    private javax.swing.JButton btnDownloadNormal;
    private javax.swing.JLabel jLabel1;
    public javax.swing.JProgressBar pbFast1;
    public javax.swing.JProgressBar pbFast2;
    public javax.swing.JProgressBar pbFast3;
    public javax.swing.JProgressBar pbNormal;
    private javax.swing.JTextField tfURL;
    // End of variables declaration//GEN-END:variables
}
